import streamlit as st
import numpy as np
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load trained model and scaler
def load_model():
    with open("diabetes_model.pkl", "rb") as file:
        model = pickle.load(file)
    return model

def load_scaler():
    with open("scaler.pkl", "rb") as file:
        scaler = pickle.load(file)
    return scaler

# Load model and scaler
model = load_model()
scaler = load_scaler()

# Streamlit App Title
st.title("🩺 Diabetes Prediction App")

# Sidebar Section
st.sidebar.header("📊 Choose Input Method")
input_method = st.sidebar.radio("Select Input Method:", ["📂 Upload CSV", "📝 Enter Manually"])

if input_method == "📂 Upload CSV":
    uploaded_file = st.sidebar.file_uploader("Upload CSV File", type=["csv"])
    
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("📂 **Uploaded Data Preview:**", df.head())

        expected_columns = ["Pregnancies", "Glucose", "BloodPressure", "SkinThickness",
                            "Insulin", "BMI", "DiabetesPedigreeFunction", "Age"]
        
        if all(col in df.columns for col in expected_columns):
            input_scaled = scaler.transform(df[expected_columns])
            predictions = model.predict(input_scaled)

            df["Prediction"] = ["Diabetic" if pred == 1 else "Non-Diabetic" for pred in predictions]
            st.write("🧪 **Prediction Results:**")
            st.dataframe(df)
        else:
            st.warning("⚠ CSV file must contain these columns: " + ", ".join(expected_columns))
else:
    st.sidebar.header("📝 Enter Patient Details")
    pregnancies = st.sidebar.number_input("Pregnancies", min_value=0)
    glucose = st.sidebar.number_input("Glucose Level", min_value=0)
    bp = st.sidebar.number_input("Blood Pressure", min_value=0)
    skin_thickness = st.sidebar.number_input("Skin Thickness", min_value=0)
    insulin = st.sidebar.number_input("Insulin Level", min_value=0)
    bmi = st.sidebar.number_input("BMI", min_value=0.0, format="%.2f")
    pedigree = st.sidebar.number_input("Diabetes Pedigree Function", min_value=0.0, format="%.3f")
    age = st.sidebar.number_input("Age", min_value=0)

    if st.sidebar.button("Predict"):
        input_data = np.array([[pregnancies, glucose, bp, skin_thickness, insulin, bmi, pedigree, age]])
        input_scaled = scaler.transform(input_data)
        prediction = model.predict(input_scaled)
        result = "🟢 Non-Diabetic" if prediction[0] == 0 else "🔴 Diabetic"
        st.write("### **Prediction Result:**")
        st.write(f"## {result}")

st.write("This app predicts diabetes based on patient details. Choose an input method and view results.")

# Train and Save Model
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
df = pd.read_csv(url, names=columns)

X = df.drop(columns=['Outcome'])
y = df['Outcome']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

with open("diabetes_model.pkl", "wb") as file:
    pickle.dump(model, file)

with open("scaler.pkl", "wb") as file:
    pickle.dump(scaler, file)

print("Model and scaler saved.")
